# task 1
while True:
    class_file = input("Enter a class file to grade (i.e. class1 for class1.txt): ")
    filename = f"{class_file}.txt"

    try:
        with open(filename, 'r') as file:
            print(f"Successfully opened {filename}")
            break
    except FileNotFoundError:
        print("File cannot be found.")
# task 2
line_count = 0
for line in filename:
    filename.readline()
    line_count += 1
print("


























# task 1
import os

def main():
    while True:
        filename = input("Enter a class file to grade (i.e. class1 for class1.txt): ")
        full_filename = filename + ".txt"
        try:
            with open(full_filename, 'r') as file:
                print(f"Successfully opened {full_filename}")
                return full_filename
        except FileNotFoundError:
            print("File cannot be found.")

if __name__ == "__main__":
    main()


# task 2
import os
import re

def analyze_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        
    total_lines = len(lines)
    invalid_lines = 0
    
    print("**** ANALYZING ****")
    for line in lines:
        line = line.strip()
        parts = line.split(',')
        if len(parts) != 26:
            print(f"Invalid line of data: does not contain exactly 26 values:\n{line}")
            invalid_lines += 1
        elif not re.match(r'^N\d{8}$', parts[0]):
            print(f"Invalid line of data: N# is invalid\n{line}")
            invalid_lines += 1

    print("**** REPORT ****")
    print(f"Total valid lines of data: {total_lines - invalid_lines}")
    print(f"Total invalid lines of data: {invalid_lines}")

def main():
    while True:
        filename = input("Enter a class file to grade (i.e. class1 for class1.txt): ")
        full_filename = filename + ".txt"
        try:
            with open(full_filename, 'r') as file:
                print(f"Successfully opened {full_filename}")
                analyze_file(full_filename)
                break
        except FileNotFoundError:
            print("File cannot be found.")

if __name__ == "__main__":
    main()


# task 3
import os
import re
import numpy as np

ANSWER_KEY = "B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D".split(',')

def analyze_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        
    total_lines = len(lines)
    invalid_lines = 0
    valid_lines = []
    
    print("**** ANALYZING ****")
    for line in lines:
        line = line.strip()
        parts = line.split(',')
        if len(parts) != 26:
            print(f"Invalid line of data: does not contain exactly 26 values:\n{line}")
            invalid_lines += 1
        elif not re.match(r'^N\d{8}$', parts[0]):
            print(f"Invalid line of data: N# is invalid\n{line}")
            invalid_lines += 1
        else:
            valid_lines.append(parts)
    
    print("**** REPORT ****")
    print(f"Total valid lines of data: {total_lines - invalid_lines}")
    print(f"Total invalid lines of data: {invalid_lines}")
    
    if total_lines - invalid_lines > 0:
        grade_exams(valid_lines)

def grade_exams(valid_lines):
    scores = []
    question_stats = np.zeros((25, 3))  # [skips, incorrect, total]

    for line in valid_lines:
        student_id = line[0]
        answers = line[1:]
        score = 0
        
        for i, answer in enumerate(answers):
            if answer == "":
                question_stats[i, 0] += 1  # Skipped
            elif answer == ANSWER_KEY[i]:
                score += 4
            else:
                score -= 1
                question_stats[i, 1] += 1  # Incorrect
            question_stats[i, 2] += 1  # Total attempts
        
        scores.append(score)

    scores = np.array(scores)
    high_scores = np.sum(scores > 80)
    mean_score = np.mean(scores)
    highest_score = np.max(scores)
    lowest_score = np.min(scores)
    score_range = highest_score - lowest_score
    median_score = np.median(scores)

    print(f"\nTotal student of high scores: {high_scores}")
    print(f"Mean (average) score: {mean_score:.3f}")
    print(f"Highest score: {highest_score}")
    print(f"Lowest score: {lowest_score}")
    print(f"Range of scores: {score_range}")
    print(f"Median score: {median_score}")

    # Most skipped questions
    skipped_questions = np.where(question_stats[:, 0] == np.max(question_stats[:, 0]))[0]
    print("Question that most people skip:")
    for q in skipped_questions:
        skip_count = question_stats[q, 0]
        skip_rate = skip_count / question_stats[q, 2]
        print(f"{q+1} - {int(skip_count)} - {skip_rate:.2f}")

    # Most incorrect questions
    incorrect_questions = np.where(question_stats[:, 1] == np.max(question_stats[:, 1]))[0]
    print("Question that most people answer incorrectly:")
    for q in incorrect_questions:
        incorrect_count = question_stats[q, 1]
        incorrect_rate = incorrect_count / question_stats[q, 2]
        print(f"{q+1} - {int(incorrect_count)} - {incorrect_rate:.2f}")

def main():
    while True:
        filename = input("Enter a class file to grade (i.e. class1 for class1.txt): ")
        full_filename = filename + ".txt"
        try:
            with open(full_filename, 'r') as file:
                print(f"Successfully opened {full_filename}")
                analyze_file(full_filename)
                break
        except FileNotFoundError:
            print("File cannot be found.")

if __name__ == "__main__":
    main()


# task 4
import os
import re
import numpy as np

ANSWER_KEY = "B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D".split(',')

def analyze_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        
    total_lines = len(lines)
    invalid_lines = 0
    valid_lines = []
    
    print("**** ANALYZING ****")
    for line in lines:
        line = line.strip()
        parts = line.split(',')
        if len(parts) != 26:
            print(f"Invalid line of data: does not contain exactly 26 values:\n{line}")
            invalid_lines += 1
        elif not re.match(r'^N\d{8}$', parts[0]):
            print(f"Invalid line of data: N# is invalid\n{line}")
            invalid_lines += 1
        else:
            valid_lines.append(parts)
    
    print("**** REPORT ****")
    print(f"Total valid lines of data: {total_lines - invalid_lines}")
    print(f"Total invalid lines of data: {invalid_lines}")
    
    if total_lines - invalid_lines > 0:
        grade_exams(valid_lines, filename)

def grade_exams(valid_lines, filename):
    scores = []
    question_stats = np.zeros((25, 3))  # [skips, incorrect, total]

    for line in valid_lines:
        student_id = line[0]
        answers = line[1:]
        score = 0
        
        for i, answer in enumerate(answers):
            if answer == "":
                question_stats[i, 0] += 1  # Skipped
            elif answer == ANSWER_KEY[i]:
                score += 4
            else:
                score -= 1
                question_stats[i, 1] += 1  # Incorrect
            question_stats[i, 2] += 1  # Total attempts
        
        scores.append((student_id, score))

    scores.sort(key=lambda x: x[1], reverse=True)
    score_values = [score for _, score in scores]
    high_scores = sum(score > 80 for _, score in scores)
    mean_score = np.mean(score_values)
    highest_score = np.max(score_values)
    lowest_score = np.min(score_values)
    score_range = highest_score - lowest_score
    median_score = np.median(score_values)

    print(f"\nTotal student of high scores: {high_scores}")
    print(f"Mean (average) score: {mean_score:.3f}")
    print(f"Highest score: {highest_score}")
    print(f"Lowest score: {lowest_score}")
    print(f"Range of scores: {score_range}")
    print(f"Median score: {median_score}")

    # Most skipped questions
    skipped_questions = np.where(question_stats[:, 0] == np.max(question_stats[:, 0]))[0]
    print("Question that most people skip:")
    for q in skipped_questions:
        skip_count = question_stats[q, 0]
        skip_rate = skip_count / question_stats[q, 2]
        print(f"{q+1} - {int(skip_count)} - {skip_rate:.2f}")

    # Most incorrect questions
    incorrect_questions = np.where(question_stats[:, 1] == np.max(question_stats[:, 1]))[0]
    print("Question that most people answer incorrectly:")
    for q in incorrect_questions:
        incorrect_count = question_stats[q, 1]
        incorrect_rate = incorrect_count / question_stats[q, 2]
        print(f"{q+1} - {int(incorrect_count)} - {incorrect_rate:.2f}")

    # Write results to file
    output_filename = filename.replace(".txt", "_grades.txt")
    with open(output_filename, 'w') as outfile:
        for student_id, score in scores:
            outfile.write(f"{student_id},{score}\n")

    print(f"Grades written to {output_filename}")

def main():
    while True:
        filename = input("Enter a class file to grade (i.e. class1 for class1.txt): ")
        full_filename = filename + ".txt"
        try:
            with open(full_filename, 'r') as file:
                print(f"Successfully opened {full_filename}")
                analyze_file(full_filename)
                break
        except FileNotFoundError:
            print("File cannot be found.")

if __name__ == "__main__":
    main()


